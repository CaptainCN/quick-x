$#include "ui/CocosGUI.h"
$using namespace ui;

typedef enum
{
    BRIGHT_NONE = -1,
    BRIGHT_NORMAL,
    BRIGHT_HIGHLIGHT
}BrightStyle;


typedef enum
{
    TOUCH_EVENT_BEGAN,
    TOUCH_EVENT_MOVED,
    TOUCH_EVENT_ENDED,
    TOUCH_EVENT_CANCELED
}TouchEventType;

typedef enum
{
    POSITION_ABSOLUTE,
    POSITION_PERCENT
}PositionType;

class Widget : public CCNode
{    
    Widget(void);
    
    
    virtual ~Widget();
    
    
    static Widget* create();
    
    
    virtual void setEnabled(bool enabled);
    
    
    bool isEnabled() const;
    
    
    void setBright(bool bright);
    
    
    bool isBright() const;

    
    
    void setBrightStyle(BrightStyle style);
    
    bool isFocused() const;

    
    void setFocused(bool fucosed);
    
    
    float getLeftInParent();
    
    
    float getBottomInParent();
    
    
    float getRightInParent();
    
    
    float getTopInParent();

    
    virtual Widget* getChildByName(const char* name);

    
    void setPositionPercent(const Vec2 &percent);
    const Vec2& getPositionPercent();
    
    
    void setPositionType(PositionType type);
    PositionType getPositionType() const;
    
    
    virtual void setFlipX(bool flipX);
    virtual bool isFlipX();
    
    
    virtual void setFlipY(bool flipY);
    virtual bool isFlipY();

    virtual void setColor(const ccColor3B& color);
    virtual void setOpacity(GLubyte opacity);
    
    const ccColor3B& getColor();
    GLubyte getOpacity();
    
    
    void didNotSelectSelf();
    bool clippingParentAreaContainPoint(const Vec2 &pt);
    
    
    virtual void checkChildInfo(int handleState,Widget* sender,const Vec2 &touchPoint);
    
    
    const Vec2& getTouchStartPos();
    const Vec2& getTouchMovePos();
    const Vec2& getTouchEndPos();
    
    virtual bool hitTest(const Vec2 &pt);
    
    
    void setLayoutParameter(LayoutParameter* parameter);
    
    
    LayoutParameter* getLayoutParameter(LayoutParameterType type);
    
    
    virtual void ignoreContentAdaptWithSize(bool ignore);
    bool isIgnoreContentAdaptWithSize() const;
    
    
    Vec2 getWorldPosition();

    
    virtual CCNode* getVirtualRenderer();    
    
    
    
    virtual std::string getDescription() const;
    
    Widget* clone();
    
    void updateSizeAndPosition();
    void updateSizeAndPosition(const CCSize& parentSize);

    void setActionTag(int tag);
	int getActionTag();
};
