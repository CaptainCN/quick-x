$#include "engine/CCDirector.h"

class SubSystem : public CCObject
{
    static SubSystem* get(const char* sysType);
    static SubSystem* add(const char* sysType);
}

typedef enum {
    /// sets a 2D projection (orthogonal projection)
    kCCDirectorProjection2D,

    /// sets a 3D projection with a fovy=60, znear=0.5f and zfar=1500.
    kCCDirectorProjection3D,

    /// it calls "updateProjection" on the projection delegate.
    kCCDirectorProjectionCustom,

    /// Default projection is 3D projection
    kCCDirectorProjectionDefault = kCCDirectorProjection3D,
} ccDirectorProjection;

class CCDirector : public CCObject
{
    /** Get current running Scene. Director can only run one Scene at the time */
    CCNode* getScene(void);

    void setFps(int dValue);

    /** Get the CCEGLView, where everything is rendered */
    CCEGLView* getOpenGLView(void);

    bool isNextDeltaTimeZero(void);
    void setNextDeltaTimeZero(bool bNextDeltaTimeZero);

    /** Whether or not the Director is paused */
    bool isPaused(void);

    /** How many frames were called since the director started */
    unsigned int getTotalFrames(void);

    /** Sets an OpenGL projection
     @since v0.8.2
     */
    int getProjection(void);
    void setProjection(ccDirectorProjection kProjection);

    // window size

    /** returns the size of the OpenGL view in points.
    */
    CCSize getWinSize(void);

    /** returns the size of the OpenGL view in pixels.
    */
    CCSize getWinSizeInPixels(void);

    /** returns visible size of the OpenGL view in points.
     *  the value is equal to getWinSize if don't invoke
     *  CCEGLView::setDesignResolutionSize()
     */
    CCSize getVisibleSize();

    /** returns visible origin of the OpenGL view in points.
     */
    Vec2 getVisibleOrigin();

    /** converts a UIKit coordinate to an OpenGL coordinate
     Useful to convert (multi) touch coordinates to the current layout (portrait or landscape)
     */
    Vec2 convertToGL(Vec2 obPoint);

    /** converts an OpenGL coordinate to a UIKit coordinate
     Useful to convert node points to window points for calls such as glScissor
     */
    Vec2 convertToUI(Vec2 obPoint);

    // Scene Management

    /** Ends the execution, releases the running scene.
     It doesn't remove the OpenGL view from its parent. You have to do it manually.
     */
    void shutdown(void);

    /** Pauses the running scene.
     The running scene will be _drawed_ but all scheduled timers will be paused
     While paused, the draw rate will be 4 FPS to reduce CPU consumption
     */
    void pause(void);

    /** Resumes the paused scene
     The scheduled timers will be activated again.
     The "delta time" will be 0 (as if the game wasn't paused)
     */
    void resume(void);

    // Memory Helper

    /** Removes cached all cocos2d cached data.
     It will purge the CCTextureCache, CCSpriteFrameCache, CCLabelBMFont cache
     @since v0.99.3
     */
    void purgeCachedData(void);

    // OpenGL Helper

    /** sets the OpenGL default values */
    void setGLDefaultValues(void);

    /** enables/disables OpenGL alpha blending */
    void setAlphaBlending(bool bOn);

    /** enables/disables OpenGL depth test */
    void setDepthTest(bool bOn);

    /** The size in pixels of the surface. It could be different than the screen size.
    High-res devices might have a higher surface size than the screen size.
    Only available when compiled using SDK >= 4.0.
    @since v0.99.4
    */
    void setContentScaleFactor(float scaleFactor);
    float getContentScaleFactor(void);

    /* delta time since last tick to main loop */
    float getDeltaTime();

    /** returns a shared instance of the director */
    static CCDirector* sharedDirector(void);

    SubSystem* getSubSystem(const std::string& name);
};

$[
    local d = CCDirector:sharedDirector()
    d.actionManager = tolua.cast(d:getSubSystem('CCActionManager'), "CCActionManager")
    d.touchDispatcher = tolua.cast(d:getSubSystem('CCTouchDispatcher'), "CCTouchDispatcher")
    d.accelerometer = tolua.cast(d:getSubSystem('CCAccelerometer'), "CCAccelerometer")
    d.keypadDispatcher = tolua.cast(d:getSubSystem('CCKeypadDispatcher'), "CCKeypadDispatcher")
    d.resourceCache = tolua.cast(d:getSubSystem('ResourceCache'), "ResourceCache")
    d.scheduler = tolua.cast(d:getSubSystem('CCScheduler'), "CCScheduler")

    -- make a global var;
    director = d;
$]


