/****************************************************************************
Copyright (c) 2010 cocos2d-x.org

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup data_structures
 * @{
 */

// for Vec2 assignement operator and copy constructor

class Vec2
{
    float x;
    float y;

    Vec2(float x, float y);
    Vec2(Vec2 other);
    Vec2(CCSize size);
    Vec2();
    void setPoint(float x, float y);
    bool equals(Vec2 target);

    /** @returns if points have fuzzy equality which means equal with some degree of variance.
     @since v2.1.4
     */
    bool fuzzyEquals(Vec2 target, float variance);

    /** Calculates distance between point an origin
     @return float
     @since v2.1.4
     */
    float getLength();

    /** Calculates the square length of a Vec2 (not calling sqrt() )
     @return float
     @since v2.1.4
     */
    float getLengthSq();

    /** Calculates the square distance between two points (not calling sqrt() )
     @return float
     @since v2.1.4
    */
    float getDistanceSq(Vec2 other);

    /** Calculates the distance between two points
     @return float
     @since v2.1.4
     */
    float getDistance(Vec2 other);

    /** @returns the angle in radians between this vector and the x axis
     @since v2.1.4
    */
    float getAngle();

    /** @returns the angle in radians between two vector directions
     @since v2.1.4
    */
    float getAngle(Vec2 other);

    /** Calculates dot product of two points.
     @return float
     @since v2.1.4
     */
    float dot(Vec2 other);

    /** Calculates cross product of two points.
     @return float
     @since v2.1.4
     */
    float cross(Vec2 other);

    /** Calculates perpendicular of v, rotated 90 degrees counter-clockwise -- cross(v, perp(v)) >= 0
     @return Vec2
     @since v2.1.4
     */
    Vec2 getPerp();

    /** Calculates perpendicular of v, rotated 90 degrees clockwise -- cross(v, rperp(v)) <= 0
     @return Vec2
     @since v2.1.4
     */
    Vec2 getRPerp();

    /** Calculates the projection of this over other.
     @return Vec2
     @since v2.1.4
     */
    Vec2 project(Vec2 other);

    /** Complex multiplication of two points ("rotates" two points).
     @return Vec2 vector with an angle of this.getAngle() + other.getAngle(),
     and a length of this.getLength() * other.getLength().
     @since v2.1.4
     */
    Vec2 rotate(Vec2 other);

    /** Unrotates two points.
     @return Vec2 vector with an angle of this.getAngle() - other.getAngle(),
     and a length of this.getLength() * other.getLength().
     @since v2.1.4
     */
    Vec2 unrotate(Vec2 other);

    /** Returns point multiplied to a length of 1.
     * If the point is 0, it returns (1, 0)
     @return Vec2
     @since v2.1.4
     */
    Vec2 normalize();

    /** Linear Interpolation between two points a and b
     @returns
        alpha == 0 ? a
        alpha == 1 ? b
        otherwise a value between a..b
     @since v2.1.4
     */
    Vec2 lerp(Vec2 other, float alpha);

    /** Rotates a point counter clockwise by the angle around a pivot
     @param pivot is the pivot, naturally
     @param angle is the angle of rotation ccw in radians
     @returns the rotated point
     @since v2.1.4
     */
    Vec2 rotateByAngle(Vec2 pivot, float angle);

    Vec2 forAngle(float a);
};

Vec2 ccp(float x, float y);
Vec2 Vec2Make(float x, float y);

class CCSize
{
    float width;
    float height;

    CCSize(float width, float height);
    CCSize(CCSize other);
    CCSize(Vec2 point);
    CCSize();
    void setSize(float width, float height);
    bool equals(CCSize target);
};

CCSize CCSizeMake(float width, float height);

class CCRect
{
    Vec2 origin;
    CCSize  size;

    CCRect(float x, float y, float width, float height);
    CCRect(CCRect other);
    CCRect();
    void setRect(float x, float y, float width, float height);
    float getMinX(); /// return the leftmost x-value of current rect
    float getMidX(); /// return the midpoint x-value of current rect
    float getMaxX(); /// return the rightmost x-value of current rect
    float getMinY(); /// return the bottommost y-value of current rect
    float getMidY(); /// return the midpoint y-value of current rect
    float getMaxY(); /// return the topmost y-value of current rect
    bool equals(CCRect rect);
    bool containsPoint(Vec2 point);
    bool intersectsRect(CCRect rect);
};

CCRect CCRectMake(float x, float y, float width, float height);

// end of data_structure group
/// @}
