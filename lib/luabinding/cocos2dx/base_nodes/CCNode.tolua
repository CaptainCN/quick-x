#define kCCTouchesAllAtOnce                 0
#define kCCTouchesOneByOne                  1
class CCNode : public CCScriptEventDispatcher
{
    static CCNode * create(void);
    void setZOrder(int zOrder);
    int getZOrder();
    void setVertexZ(float vertexZ);
    float getVertexZ();
    void setScaleX(float fScaleX);
    float getScaleX();
    void setScaleY(float fScaleY);
    float getScaleY();
    void setScale(float scale);
    float getScale();
    void setPosition(float x, float y);
    void setPosition(CCPoint point);
    void getPosition(float* x = 0, float* y = 0);
    CCPoint getPosition @ getPositionInCCPoint();
    void  setPositionX(float x);
    float getPositionX(void);
    void  setPositionY(float y);
    float getPositionY(void);
    void setSkewX(float fSkewX);
    float getSkewX();
    void setSkewY(float fSkewY);
    float getSkewY();
    void setAnchorPoint(CCPoint anchorPoint);
    CCPoint getAnchorPoint();
    CCPoint getAnchorPointInPoints();
    void setContentSize(CCSize contentSize);
    CCSize getContentSize();
    void setVisible(bool visible);
    bool isVisible();
    void setRotation(float fRotation);
    float getRotation();
    void setRotationX(float fRotaionX);
    float getRotationX();
    void setRotationY(float fRotationY);
    float getRotationY();
    void ignoreAnchorPointForPosition @ setIgnoreAnchorPointForPosition (bool ignore);
    void ignoreAnchorPointForPosition(bool ignore);
    bool isIgnoreAnchorPointForPosition();
    void addChild(CCNode* child, int zOrder, int tag);
    void addChild(CCNode * child, int zOrder);
    void addChild(CCNode * child);
    CCNode *getChildByTag(int tag);
    CCArray *getChildren();
    unsigned int getChildrenCount(void);
    void setParent(CCNode* parent);
    CCNode* getParent();
    void removeSelf();
    void removeFromParent();
    void removeFromParentAndCleanup(bool cleanup = true);
    void removeChild(CCNode* child, bool cleanup = true);
    void removeChildByTag(int tag, bool cleanup = true);
    void removeAllChildren();
    void removeAllChildrenWithCleanup(bool cleanup = true);
    void reorderChild(CCNode * child, int zOrder);
    void sortAllChildren();
    CCGridBase* getGrid();
    void setGrid(CCGridBase *pGrid);
    int getTag();
    void setTag(int nTag);
    CCObject* getUserObject();
    void setUserObject(CCObject *pUserObject);
    Material* getMaterial();
    void setMaterial(Material *m);
    CCCamera* getCamera();
    bool isRunning();
    void cleanup(void);
    void visit(void);
    void draw(void);
    CCRect boundingBox(void);
    CCRect boundingBox @ getBoundingBox(void);
    CCRect getCascadeBoundingBox(void);
    void setCascadeBoundingBox(CCRect boundingBox);
    void resetCascadeBoundingBox(void);
    CCAction* runAction(CCAction* action);
    void stopAllActions(void);
    void stopAction(CCAction* action);
    void stopActionByTag(int tag);
    CCAction* getActionByTag(int tag);
    unsigned int numberOfRunningActions(void);
    unsigned int numberOfRunningActions @ getNumberOfRunningActions (void);
    void scheduleUpdate(void);
    void scheduleUpdateWithPriority(int priority);
    void unscheduleUpdate(void);
    void resumeSchedulerAndActions(void);
    void pauseSchedulerAndActions(void);
    CCPoint convertToNodeSpace(CCPoint worldPoint);
    CCPoint convertToWorldSpace(CCPoint nodePoint);
    CCPoint convertToNodeSpaceAR(CCPoint worldPoint);
    CCPoint convertToWorldSpaceAR(CCPoint nodePoint);
    CCPoint convertTouchToNodeSpace(CCTouch * touch);
    CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);
    void setAdditionalTransform(const CCAffineTransform& additionalTransform);
    CCComponent* getComponent(const char *pName);
    virtual bool addComponent(CCComponent *pComponent);
    virtual bool removeComponent(const char *pName);
    virtual bool removeComponent(CCComponent *pComponent);
    virtual void removeAllComponents();
    void setColor(const ccColor3B& color);
    const ccColor3B& getColor(void);
    const ccColor3B& getDisplayedColor(void);
    GLubyte getDisplayedOpacity(void);
    GLubyte getOpacity(void);
    void setOpacity(GLubyte opacity);
    void setOpacityModifyRGB(bool bValue);
    bool isOpacityModifyRGB(void);
    bool isCascadeColorEnabled(void);
    void setCascadeColorEnabled(bool cascadeColorEnabled);
    void updateDisplayedColor(const ccColor3B& color);
    bool isCascadeOpacityEnabled(void);
    void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
    void updateDisplayedOpacity(GLubyte opacity);
    CCScene *getScene();
    bool isTouchCaptureEnabled();
    void setTouchCaptureEnabled(bool value);
    bool isTouchSwallowEnabled();
    void setTouchSwallowEnabled(bool value);
    bool isTouchEnabled();
    void setTouchEnabled(bool value);
    void setTouchMode(int mode);
    int getTouchMode();
    };
