

$#include "actions/CCActionGrid.h"


/** @brief Base class for Grid actions */
class CCGridAction : public CCActionInterval
{
};

/**
 @brief Base class for CCGrid3D actions.
 Grid3D actions can modify a non-tiled grid.
 */
class CCGrid3DAction : public CCGridAction
{
};

/** @brief Base class for CCTiledGrid3D actions */
class CCTiledGrid3DAction : public CCGridAction
{
    /** creates the action with size and duration */
    static CCTiledGrid3DAction* create(float duration, CCSize gridSize);
};

/** @brief CCAccelDeccelAmplitude action */
class CCAccelDeccelAmplitude : public CCActionInterval
{
    /** creates the action with an inner action that has the amplitude property, and a duration time */
    static CCAccelDeccelAmplitude* create(CCAction *pAction, float duration);
};

/** @brief CCAccelAmplitude action */
class CCAccelAmplitude : public CCActionInterval
{
    /** creates the action with an inner action that has the amplitude property, and a duration time */
    static CCAccelAmplitude* create(CCAction *pAction, float duration);
};

/** @brief CCDeccelAmplitude action */
class CCDeccelAmplitude : public CCActionInterval
{
    /** creates the action with an inner action that has the amplitude property, and a duration time */
    static CCDeccelAmplitude* create(CCAction *pAction, float duration);
};

/** @brief CCStopGrid action.
 @warning Don't call this action if another grid action is active.
 Call if you want to remove the the grid effect. Example:
 CCSequence::actions(Lens::action(...), CCStopGrid::action(...), NULL);
 */
class CCStopGrid : public CCActionInstant
{
    /** Allocates and initializes the action */
    static CCStopGrid* create(void);
};

/** @brief CCReuseGrid action */
class CCReuseGrid : public CCActionInstant
{
    /** creates an action with the number of times that the current grid will be reused */
    static CCReuseGrid* create(int times);
};

// end of actions group
/// @}
