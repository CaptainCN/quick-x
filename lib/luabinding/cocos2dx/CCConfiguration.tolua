
$#include "CCConfiguration.h"

class CCConfiguration : public CCObject
{
    /** returns a shared instance of CCConfiguration */
    static CCConfiguration *sharedConfiguration(void);

    /** OpenGL Max texture size. */
    int getMaxTextureSize(void);

    /** OpenGL Max Modelview Stack Depth. */
    int getMaxModelviewStackDepth(void);

    /** returns the maximum texture units
     @since v2.0.0
     */
    int getMaxTextureUnits(void);

    /** Whether or not the GPU supports NPOT (Non Power Of Two) textures.
     OpenGL ES 2.0 already supports NPOT (iOS).

     @since v0.99.2
     */
    bool supportsNPOT(void);

    /** Whether or not PVR Texture Compressed is supported */
    bool supportsPVRTC(void);

    /** Whether or not BGRA8888 textures are supported.
     @since v0.99.2
     */
    bool supportsBGRA8888(void);

    /** Whether or not glDiscardFramebufferEXT is supported
     @since v0.99.2
     */
    bool supportsDiscardFramebuffer(void);

    /** Whether or not shareable VAOs are supported.
     @since v2.0.0
     */
    bool supportsShareableVAO(void);

    /** returns whether or not an OpenGL is supported */
    bool checkForGLExtension(const char *searchName);

    // ----------------------------------------

    /** returns the value of a given key as a string.
     If the key is not found, it will return the default value */
    const char *getCString(const char *key, const char *default_value=NULL );

    /** returns the value of a given key as a boolean.
     If the key is not found, it will return the default value */
    bool getBool(const char *key, bool default_value=false );

    /** returns the value of a given key as a double.
     If the key is not found, it will return the default value */
    double getNumber(const char *key, double default_value=0.0 );

    /** returns the value of a given key as a double */
    CCObject * getObject(const char *key );

    /** sets a new key/value pair  in the configuration dictionary */
    void setObject(const char *key, CCObject *value );

    /** dumps the current configuration on the console */
    void dumpInfo(void);

    /** gathers OpenGL / GPU information */
    void gatherGPUInfo(void);

    /** Loads a config file. If the keys are already present, then they are going to be replaced. Otherwise the new keys are added. */
    void loadConfigFile(const char *filename);
};

// end of global group
/// @}
