
$#include "support/Vec2Extension.h"

Vec2 ccpNeg(Vec2 v);
Vec2 ccpAdd(Vec2 v1, Vec2 v2);
Vec2 ccpSub(Vec2 v1, Vec2 v2);
Vec2 ccpMult(Vec2 v, float s);
Vec2 ccpMidpoint(Vec2 v1, Vec2 v2);
float ccpDot(Vec2 v1, Vec2 v2);
float ccpCross(Vec2 v1, Vec2 v2);
Vec2 ccpPerp(Vec2 v);
Vec2 ccpRPerp(Vec2 v);
Vec2 ccpProject(Vec2 v1, Vec2 v2);
Vec2 ccpRotate(Vec2 v1, Vec2 v2);
Vec2 ccpUnrotate(Vec2 v1, Vec2 v2);
float ccpLengthSQ(Vec2 v);
float ccpDistanceSQ(Vec2 p1, Vec2 p2);
float ccpLength(Vec2 v);
float ccpDistance(Vec2 v1, Vec2 v2);
Vec2 ccpNormalize(Vec2 v);
Vec2 ccpForAngle(float a);
float ccpToAngle(Vec2 v);
float   clampf(float value, float min_inclusive, float max_inclusive);
Vec2 ccpClamp(Vec2 p, Vec2 from, Vec2 to);
Vec2 ccpFromSize(CCSize s);
Vec2  ccpLerp(Vec2 a, Vec2 b, float alpha);
bool  ccpFuzzyEqual(Vec2 a, Vec2 b, float variance);
Vec2  ccpCompMult(Vec2 a, Vec2 b);
float  ccpAngleSigned(Vec2 a, Vec2 b);
float  ccpAngle(Vec2 a, Vec2 b);
Vec2  ccpRotateByAngle(Vec2 v, Vec2 pivot, float angle);
bool  ccpLineIntersect(Vec2 p1, Vec2 p2, Vec2 p3, Vec2 p4, float *s, float *t);
bool ccpSegmentIntersect(Vec2 A, Vec2 B, Vec2 C, Vec2 D);
Vec2 ccpIntersectPoint(Vec2 A, Vec2 B, Vec2 C, Vec2 D);
