
$#include "support/user_default/CCUserDefault.h"

class CCUserDefault
{
    // get value methods

    /**
    @brief Get bool value by key, if the key doesn't exist, a default value will return.
     You can set the default value, or it is false.
    */
    bool    getBoolForKey(const char* pKey, bool defaultValue);
    bool    getBoolForKey(const char* pKey);
    /**
    @brief Get integer value by key, if the key doesn't exist, a default value will return.
     You can set the default value, or it is 0.
    */
    int     getIntegerForKey(const char* pKey, int defaultValue);
    int     getIntegerForKey(const char* pKey);
    /**
    @brief Get float value by key, if the key doesn't exist, a default value will return.
     You can set the default value, or it is 0.0f.
    */
    float    getFloatForKey(const char* pKey, float defaultValue);
    float    getFloatForKey(const char* pKey);
    /**
    @brief Get double value by key, if the key doesn't exist, a default value will return.
     You can set the default value, or it is 0.0.
    */
    double  getDoubleForKey(const char* pKey, double defaultValue);
    double  getDoubleForKey(const char* pKey);
    /**
    @brief Get string value by key, if the key doesn't exist, a default value will return.
    You can set the default value, or it is "".
    */
    std::string getStringForKey(const char* pKey, const char *defaultValue);
    std::string getStringForKey(const char* pKey);

    // set value methods

    /**
    @brief Set bool value by key.
    */
    void    setBoolForKey(const char* pKey, bool value);
    /**
    @brief Set integer value by key.
    */
    void    setIntegerForKey(const char* pKey, int value);
    /**
    @brief Set float value by key.
    */
    void    setFloatForKey(const char* pKey, float value);
    /**
    @brief Set double value by key.
    */
    void    setDoubleForKey(const char* pKey, double value);
    /**
    @brief Set string value by key.
    */
    void    setStringForKey(const char* pKey, const char *value);
    /**
     @brief Save content to xml file
     */
    void    flush();

    static CCUserDefault* sharedUserDefault();
    static void purgeSharedUserDefault();
    static std::string getXMLFilePath();
    static bool isXMLFileExist();
};

// end of data_storage group
/// @}
