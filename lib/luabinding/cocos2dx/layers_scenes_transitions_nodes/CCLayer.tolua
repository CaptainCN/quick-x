$#include "nodes/CCLayer.h"

class CCLayer : public CCNode
{
    static CCLayer *create(void);
};

//
// CCLayerColor
//
/** @brief CCLayerColor is a subclass of CCLayer that implements the CCRGBAProtocol protocol.

All features from CCLayer are valid, plus the following new features:
- opacity
- RGB colors
*/
class CCLayerColor : public CCLayer
{
    /** creates a CCLayer with color, width and height in Points */
    static CCLayerColor * create(ccColor4B color, GLfloat width, GLfloat height);
    /** creates a CCLayer with color. Width and height are the window size. */
    static CCLayerColor * create(ccColor4B color);
    static CCLayerColor* create();

    /** change width in Points*/
    void changeWidth(GLfloat w);
    /** change height in Points*/
    void changeHeight(GLfloat h);
    /** change width and height in Points
    @since v0.8
    */
    void changeWidthAndHeight(GLfloat w ,GLfloat h);

    ccBlendFunc getBlendFunc();
    void setBlendFunc(ccBlendFunc blend);

    void setOpacityModifyRGB(bool bValue);
    bool isOpacityModifyRGB(void);
    void setColor(ccColor3B color);
    void setOpacity(GLubyte opacity);
};

//
// CCLayerGradient
//
/** @brief CCLayerGradient is a subclass of CCLayerColor that draws gradients across the background.

All features from CCLayerColor are valid, plus the following new features:
- direction
- final color
- interpolation mode

Color is interpolated between the startColor and endColor along the given
vector (starting at the origin, ending at the terminus).  If no vector is
supplied, it defaults to (0, -1) -- a fade from top to bottom.

If 'compressedInterpolation' is disabled, you will not see either the start or end color for
non-cardinal vectors; a smooth gradient implying both end points will be still
be drawn, however.

If ' compressedInterpolation' is enabled (default mode) you will see both the start and end colors of the gradient.

@since v0.99.5
*/
class CCLayerGradient : public CCLayerColor
{
    /** Creates a full-screen CCLayer with a gradient between start and end in the direction of v. */
    static CCLayerGradient* create(ccColor4B start, ccColor4B end, CCPoint v);
    /** Creates a full-screen CCLayer with a gradient between start and end. */
    static CCLayerGradient* create(ccColor4B start, ccColor4B end);
    static CCLayerGradient* create();

    ccColor3B getStartColor();
    void setStartColor(ccColor3B color);

    ccColor3B getEndColor();
    void setEndColor(ccColor3B color);

    GLubyte getStartOpacity();
    void setStartOpacity(GLubyte opacity);

    GLubyte getEndOpacity();
    void setEndOpacity(GLubyte opacity);

    CCPoint getVector();
    void setVector(CCPoint vector);

    void setCompressedInterpolation(bool bCompressedInterpolation);
    bool isCompressedInterpolation();
};


/** @brief CCMultipleLayer is a CCLayer with the ability to multiplex it's children.
Features:
- It supports one or more children
- Only one children will be active a time
*/
class CCLayerMultiplex : public CCLayer
{
    static CCLayerMultiplex* create();

    /** creates a CCMultiplexLayer with an array of layers.
     @since v2.1
     */
    static CCLayerMultiplex* createWithArray(CCArray* arrayOfLayers);

    /**
     * lua script can not init with undetermined number of variables
     * so add these functions to be used with lua.
     */
    static CCLayerMultiplex * createWithLayer(CCLayer* layer);

    void addLayer(CCLayer* layer);

    void switchTo(unsigned int n);

    /** release the current layer and switches to another layer indexed by n.
    The current (old) layer will be removed from it's parent with 'cleanup:YES'.
    */
    void switchToAndReleaseMe(unsigned int n);
};

// end of layer group
/// @}
